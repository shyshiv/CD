#include <ctype.h>
#include <stdio.h>
#include <string.h>
int count, n = 0;
char calc_first[10][100];
int m = 0;
char production[10][10];
char f[10], first[10];
int k;
char ck;
int e;
void findfirst(char c, int q1, int q2)
{
        int j;

        if (!(isupper(c))) {
                first[n++] = c;
        }
        for (j = 0; j < count; j++) {
                if (production[j][0] == c) {
                        if (production[j][2] == '#') {
                                if (production[q1][q2] == '\0')
                                        first[n++] = '#';
                                else if (production[q1][q2] != '\0'
                                                && (q1 != 0 || q2 != 0)) {

                                        findfirst(production[q1][q2], q1,
                                                        (q2 + 1));
                                }
                                else
                                        first[n++] = '#';
                        }
                        else if (!isupper(production[j][2])) {
                                first[n++] = production[j][2];
                        }
                        else {

                                findfirst(production[j][2], j, 3);
                        }
                }
        }
}
int main(int argc, char** argv)
{
        int jm = 0;
        int km = 0;
        int i, choice;
        char c, ch;
        count = 8;


        strcpy(production[0], "E=TS");
        strcpy(production[1], "S=+TS");
        strcpy(production[2], "S=#");
        strcpy(production[3], "T=FJ");
        strcpy(production[4], "J=*FJ");
        strcpy(production[5],"J=#");
        strcpy(production[6],"F=(E)");
        strcpy(production[7],"F=i");


        int kay;
        char done[count];
        int ptr = -1;
printf("\tFIRST FOR THE PRODUCTIONS\n");

        for (k = 0; k < count; k++) {
                for (kay = 0; kay < 100; kay++) {
                        calc_first[k][kay] = '!';
                }
        }
        int point1 = 0, point2, xxx;

        for (k = 0; k < count; k++) {
                c = production[k][0];
                point2 = 0;
                xxx = 0;


                for (kay = 0; kay <= ptr; kay++)
                        if (c == done[kay])
                                xxx = 1;

                if (xxx == 1)
                        continue;

                findfirst(c, 0, 0);
                ptr += 1;

                done[ptr] = c;
                printf("First(%c) = { ", c);
                calc_first[point1][point2++] = c;


                for (i = 0 + jm; i < n; i++) {
                        int lark = 0, chk = 0;

                        for (lark = 0; lark < point2; lark++) {

                                if (first[i] == calc_first[point1][lark]) {
                                        chk = 1;
                                        break;
                                }
                        }
                        if (chk == 0) {
                                printf("%c, ", first[i]);
                                calc_first[point1][point2++] = first[i];
                        }
                }
                printf("}\n");
                jm = n;
                point1++;
        }
        printf("\n");
     
}

